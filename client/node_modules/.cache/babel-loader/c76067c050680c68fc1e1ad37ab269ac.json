{"ast":null,"code":"import _regeneratorRuntime from \"/Users/bradrumack/Projects/employee-tracker/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/bradrumack/Projects/employee-tracker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { storeToken } from '../utils/handleToken';\nimport local from '../api/local';\nvar methods = {\n  createEmployee: function () {\n    var _createEmployee = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(values, callback) {\n      var response, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return local.post(\"/employee/new\", values);\n\n            case 2:\n              response = _context.sent;\n              data = response.data;\n\n              if (!data.success) {\n                callback(data.message);\n              } else if (data.token) {\n                callback(null, {\n                  token: data.token\n                });\n                storeToken(data.token);\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function createEmployee(_x, _x2) {\n      return _createEmployee.apply(this, arguments);\n    }\n\n    return createEmployee;\n  }(),\n  login: function () {\n    var _login = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(credentials, callback) {\n      var response, data;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return local.post(\"/employee/login\", credentials);\n\n            case 2:\n              response = _context2.sent;\n              data = response.data;\n\n              if (!data.success) {\n                callback(data.message);\n              } else if (data.token) {\n                callback(null, {\n                  token: data.token\n                });\n                storeToken(data.token);\n              }\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function login(_x3, _x4) {\n      return _login.apply(this, arguments);\n    }\n\n    return login;\n  }()\n};\nexport default methods;","map":{"version":3,"sources":["/Users/bradrumack/Projects/employee-tracker/client/src/lib/methods.js"],"names":["storeToken","local","methods","createEmployee","values","callback","post","response","data","success","message","token","login","credentials"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,sBAA3B;AACA,OAAOC,KAAP,MAAkB,cAAlB;AAEA,IAAMC,OAAO,GAAG;AAEdC,EAAAA,cAAc;AAAA;AAAA;AAAA,6BAAE,iBAAOC,MAAP,EAAeC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACSJ,KAAK,CAACK,IAAN,kBAA4BF,MAA5B,CADT;;AAAA;AACRG,cAAAA,QADQ;AAERC,cAAAA,IAFQ,GAEDD,QAAQ,CAACC,IAFR;;AAGd,kBAAI,CAACA,IAAI,CAACC,OAAV,EAAmB;AACjBJ,gBAAAA,QAAQ,CAACG,IAAI,CAACE,OAAN,CAAR;AACD,eAFD,MAEO,IAAIF,IAAI,CAACG,KAAT,EAAgB;AACrBN,gBAAAA,QAAQ,CAAC,IAAD,EAAO;AAAEM,kBAAAA,KAAK,EAAEH,IAAI,CAACG;AAAd,iBAAP,CAAR;AACAX,gBAAAA,UAAU,CAACQ,IAAI,CAACG,KAAN,CAAV;AACD;;AARa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,KAFA;AAadC,EAAAA,KAAK;AAAA;AAAA;AAAA,6BAAE,kBAAOC,WAAP,EAAoBR,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACkBJ,KAAK,CAACK,IAAN,oBAA8BO,WAA9B,CADlB;;AAAA;AACCN,cAAAA,QADD;AAECC,cAAAA,IAFD,GAEQD,QAAQ,CAACC,IAFjB;;AAGL,kBAAI,CAACA,IAAI,CAACC,OAAV,EAAmB;AACjBJ,gBAAAA,QAAQ,CAACG,IAAI,CAACE,OAAN,CAAR;AACD,eAFD,MAEO,IAAIF,IAAI,CAACG,KAAT,EAAgB;AACrBN,gBAAAA,QAAQ,CAAC,IAAD,EAAO;AAAEM,kBAAAA,KAAK,EAAEH,IAAI,CAACG;AAAd,iBAAP,CAAR;AACAX,gBAAAA,UAAU,CAACQ,IAAI,CAACG,KAAN,CAAV;AACD;;AARI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAbS,CAAhB;AAyBA,eAAeT,OAAf","sourcesContent":["import { storeToken } from '../utils/handleToken'\nimport local from '../api/local'\n\nconst methods = {\n\n  createEmployee: async (values, callback) => {\n    const response = await local.post(`/employee/new`, values)\n    const data = response.data\n    if (!data.success) {\n      callback(data.message)\n    } else if (data.token) {\n      callback(null, { token: data.token })\n      storeToken(data.token)\n    }\n  },\n\n  login: async (credentials, callback) => {\n    const response = await local.post(`/employee/login`, credentials)\n    const data = response.data\n    if (!data.success) {\n      callback(data.message)\n    } else if (data.token) {\n      callback(null, { token: data.token })\n      storeToken(data.token)\n    }\n  }\n}\n\nexport default methods\n"]},"metadata":{},"sourceType":"module"}