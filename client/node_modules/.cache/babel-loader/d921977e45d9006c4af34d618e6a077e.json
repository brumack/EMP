{"ast":null,"code":"import _regeneratorRuntime from \"/Users/bradrumack/Projects/employee-tracker/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/bradrumack/Projects/employee-tracker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this;\n\nimport { storeToken } from '../utils/handleToken';\nmodule.exports = {\n  setTime: function setTime() {\n    setInterval(function () {\n      _this.setState({\n        currentTime: new Date()\n      });\n    }, 1000);\n  },\n  createEmployee: function () {\n    var _createEmployee = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(values) {\n      var response, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return local.post(\"/employee/new\", values);\n\n            case 2:\n              response = _context.sent;\n              data = response.data;\n\n              if (!data.success) {\n                _this.handleError(data.message);\n              } else if (data.token) {\n                _this.setState({\n                  token: data.token\n                });\n\n                storeToken(data.token);\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function createEmployee(_x) {\n      return _createEmployee.apply(this, arguments);\n    }\n\n    return createEmployee;\n  }(),\n  login: function () {\n    var _login = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(credentials) {\n      var response, data;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return local.post(\"/employee/login\", credentials);\n\n            case 2:\n              response = _context2.sent;\n              data = response.data;\n\n              if (!data.success) {\n                _this.handleError(data.message);\n              } else if (data.token) {\n                storeToken(data.token);\n\n                _this.setState({\n                  token: data.token\n                });\n              }\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function login(_x2) {\n      return _login.apply(this, arguments);\n    }\n\n    return login;\n  }()\n};","map":{"version":3,"sources":["/Users/bradrumack/Projects/employee-tracker/client/src/lib/methods.js"],"names":["storeToken","module","exports","setTime","setInterval","setState","currentTime","Date","createEmployee","values","local","post","response","data","success","handleError","message","token","login","credentials"],"mappings":";;;;;AAAA,SAASA,UAAT,QAA2B,sBAA3B;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,OAAO,EAAE,mBAAM;AACbC,IAAAA,WAAW,CAAC,YAAM;AAChB,MAAA,KAAI,CAACC,QAAL,CAAc;AAAEC,QAAAA,WAAW,EAAE,IAAIC,IAAJ;AAAf,OAAd;AACD,KAFU,EAER,IAFQ,CAAX;AAGD,GALc;AAOfC,EAAAA,cAAc;AAAA;AAAA;AAAA,6BAAE,iBAAMC,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACSC,KAAK,CAACC,IAAN,kBAA4BF,MAA5B,CADT;;AAAA;AACRG,cAAAA,QADQ;AAERC,cAAAA,IAFQ,GAEDD,QAAQ,CAACC,IAFR;;AAGd,kBAAI,CAACA,IAAI,CAACC,OAAV,EAAmB;AACjB,gBAAA,KAAI,CAACC,WAAL,CAAiBF,IAAI,CAACG,OAAtB;AACD,eAFD,MAEO,IAAIH,IAAI,CAACI,KAAT,EAAgB;AACrB,gBAAA,KAAI,CAACZ,QAAL,CAAc;AAAEY,kBAAAA,KAAK,EAAEJ,IAAI,CAACI;AAAd,iBAAd;;AACAjB,gBAAAA,UAAU,CAACa,IAAI,CAACI,KAAN,CAAV;AACD;;AARa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,KAPC;AAkBfC,EAAAA,KAAK;AAAA;AAAA;AAAA,6BAAE,kBAAMC,WAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACkBT,KAAK,CAACC,IAAN,oBAA8BQ,WAA9B,CADlB;;AAAA;AACCP,cAAAA,QADD;AAECC,cAAAA,IAFD,GAEQD,QAAQ,CAACC,IAFjB;;AAGL,kBAAI,CAACA,IAAI,CAACC,OAAV,EAAmB;AACjB,gBAAA,KAAI,CAACC,WAAL,CAAiBF,IAAI,CAACG,OAAtB;AACD,eAFD,MAEO,IAAIH,IAAI,CAACI,KAAT,EAAgB;AACrBjB,gBAAAA,UAAU,CAACa,IAAI,CAACI,KAAN,CAAV;;AACA,gBAAA,KAAI,CAACZ,QAAL,CAAc;AAAEY,kBAAAA,KAAK,EAAEJ,IAAI,CAACI;AAAd,iBAAd;AACD;;AARI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAlBU,CAAjB","sourcesContent":["import { storeToken } from '../utils/handleToken'\n\nmodule.exports = {\n  setTime: () => {\n    setInterval(() => {\n      this.setState({ currentTime: new Date() })\n    }, 1000)\n  },\n\n  createEmployee: async values => {\n    const response = await local.post(`/employee/new`, values)\n    const data = response.data\n    if (!data.success) {\n      this.handleError(data.message)\n    } else if (data.token) {\n      this.setState({ token: data.token })\n      storeToken(data.token)\n    }\n  },\n\n  login: async credentials => {\n    const response = await local.post(`/employee/login`, credentials)\n    const data = response.data\n    if (!data.success) {\n      this.handleError(data.message)\n    } else if (data.token) {\n      storeToken(data.token)\n      this.setState({ token: data.token })\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}